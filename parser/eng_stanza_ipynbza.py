# -*- coding: utf-8 -*-
"""eng stanza.ipynbza

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iGaoH3he_SFjV1BhVDwjC4YJySBA-sat
"""

to!pip uninstall torch torchvision stanza -y

!pip install torch torchvision -f https://download.pytorch.org/whl/torch_stable.html
!pip install stanza

import stanza

!pip install python-docx

from docx import Document
from docx.shared import Pt
from google.colab import files
import time

# Upload the text file
uploaded = files.upload()

start_time = time.time()

# Get the uploaded file name
filename = list(uploaded.keys())[0]

# Read the content of the file
with open(filename, 'r', encoding='utf-8') as file:
    paragraph = file.read()

print("File read in:", time.time() - start_time, "seconds")

# Download English model if not already downloaded
stanza.download('en', verbose=True)

# Initialize Stanza pipeline
nlp = stanza.Pipeline('en', processors='tokenize,mwt,pos,lemma,depparse')

print("Stanza pipeline initialized in:", time.time() - start_time, "seconds")

# Process the text
doc = nlp(paragraph)

print("Text processed in:", time.time() - start_time, "seconds")

conllu_format = ""


for sentence in doc.sentences:
    for word in sentence.words:
        conllu_format += "{:<10}{:<15}{:<15}{:<10}{:<10}{:<10}{:<10}{:<10}{:<10}{:<10}\n".format(
            word.id,       # ID
            word.text,     # FORM
            word.lemma,    # LEMMA
            word.upos,     # UPOS
            word.xpos,     # XPOS
            "_",           # FEATS (leave blank for now)
            word.head,     # HEAD
            word.deprel,   # DEPREL
            "_",           # DEPS (leave blank for now)
            "_"            # MISC (leave blank for now)
        )
    # Add sentence separator before starting the next sentence
    conllu_format += "\n"
    # ... (Add metadata for the next sentence if needed)

# Save the CoNLL-U format text to a file
conllu_filename = 'parsed_data.conllu'
with open(conllu_filename, 'w', encoding='utf-8') as file:
    file.write(conllu_format)

# Download the file
files.download(conllu_filename)

#in docx format
docx_filename = 'parsed_data.docx'
document = Document()

# Add a title
document.add_heading('Parsed Data', level=1)

# Add a table with an additional column for Dependency Length
num_columns = 10
table = document.add_table(rows=1, cols=num_columns)
hdr_cells = table.rows[0].cells
hdr_cells[0].text = 'ID'
hdr_cells[1].text = 'Text'
hdr_cells[2].text = 'Lemma'
hdr_cells[3].text = 'UPOS'
hdr_cells[4].text = 'XPOS'
hdr_cells[5].text = 'Head'
hdr_cells[6].text = 'Deprel'
hdr_cells[7].text = 'Start Char'
hdr_cells[8].text = 'End Char'
hdr_cells[9].text = 'Dependency Length'

# Fill the table with data
for sentence in doc.sentences:
    for word in sentence.words:
        row_cells = table.add_row().cells
        row_cells[0].text = str(word.id)
        row_cells[1].text = word.text
        row_cells[2].text = word.lemma
        row_cells[3].text = word.upos
        row_cells[4].text = word.xpos
        row_cells[5].text = str(word.head)
        row_cells[6].text = word.deprel
        row_cells[7].text = str(word.start_char)
        row_cells[8].text = str(word.end_char)
        if word.head == 0:
            dep_length = 0
        else:
            dep_length = abs(word.id - word.head)
        row_cells[9].text = str(dep_length)

# Save the document
document.save(docx_filename)

# Download the file
files.download(docx_filename)